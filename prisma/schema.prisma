// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    models        Models[]
}

model Models {
    id          String   @id @default(cuid())
    User        User?    @relation(fields: [userId], references: [id])
    userId      String?
    name        String
    description String?
    data        Json?
    nodes       Json?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Block       Block[]
}

enum Formats {
    USD
    NUMBER
    PERCENT
}

enum Categories {
    MATH
    RENTAL_INCOME
    OPERATING_EXPENSES
    NET_INCOME
    DEBT_SERVICE
    CASH_FLOW
    TAX_CONSIDERATIONS
    RETURN_METRICS
    PROPERTY_VALUATION
}

model ModelParameters {
    id                       String     @id @default(cuid())
    name                     String
    operator                 String?
    data                     Json?
    endpoint                 String?
    format                   Formats
    functionality            Json?
    category                 Categories
    modelParameterCategoryId String
}

model Block {
    id        String   @id @default(cuid())
    type      String
    data      Json
    position  Json
    model     Models   @relation(fields: [modelsId], references: [id])
    modelsId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
